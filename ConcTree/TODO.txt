19-Jul-2016:

The version tagged as prefuselike controls excessive large trees by
constraining the depth-1 to a certain (user-defined) width and further
prunning low-frequency (single occurrence at present) items at level
2. This works reasonably well except when the topology includes very
wide level-2 trees which themselves contain fairly wide
tries. 

However, these constrains are currently implemented at the Node
level (data level) by filtering Nodes out of the tree. A more
prefuse-like way of doing this would be to do it at the VisualItem
level (visualisation level) by marking the nodes be pruned
out as 'non-visible' (PrefuseLib.updateVisible(Noditem, boolean)) and
letting the visualisation actions (e.g. a visibility filter) take care
of the rendering. My attempts to implement this so far have been
frustrated by the fact that the prefuse tree rendering engine refuses
to behave as documented. The strategy is: implement a filtering
predicate (say WordCountPredicate) which will mark which nodes to hide
or collapse and add it to the general visualisation filter. Th problem
is the NodeLinkTreeLayout and CollapsedSubtreeLayout will layout the
whole tree, leaving blank spaces for the invisible items, rather than
collapsing the sister branches around them (as FisheyeTreeFilter
causes them to do interactively).

I have 'frozen' a working version that follows the unprefuse-like
approach, which we can use on the version of the software to be made
available through the genealogiesofknowledge.net site for the moment,
and started a 'fork' for an eventual prefuse-like version.

In git, a way to handle this type of branching is:

  git tag unprefuselike # tag current master repository (working version)

  git checkout -b prefuselike unprefuselike # fork a new branch off unprefuselike
                                            # and check it out; all
                                            #  development now on new branch

If we need to return to the master (unprefuselike) branch (e.g. to
make bug fixes etc) before merging prefuselike back into the main
trunk, all we need to do is

  git checkout master

make the changes, and then go back to the branch

  git checkout prefuselike

This all takes place in your local git repo but can be pushed to
gitlab etc as normal. 

When we are ready to release prefuselike, we can then merge the branch
back:

  git merge prefuselike

